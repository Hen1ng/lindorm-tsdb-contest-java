package com.alibaba.lindorm.contest.compress;

import com.alibaba.lindorm.contest.compress.intcodec.simple.Simple9Codes;
import com.alibaba.lindorm.contest.compress.intcodec2.integercompression.*;
import com.alibaba.lindorm.contest.file.TSFileService;
import com.alibaba.lindorm.contest.structs.Constant;
import com.alibaba.lindorm.contest.util.ArrayUtils;
import com.alibaba.lindorm.contest.util.Constants;
import com.alibaba.lindorm.contest.util.ZigZagUtil;


import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.Random;

public class IntCompress {

    static int[] testNum2 = new int[]{
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,513,1025
    };

    static int[] testNum = new int[]{
            68,667,437,1480,968,964,961,1933,405,35,1902,122,1138,1324,488,1383,1118,1029,1817,820,1742,352,2057,2106,1163,1795,855,2076,1221,2200,1242,1672,165,1132,161,3,254,1,255,1,2,1,254,1,1,2,2,2,2,3,254,1,254,3,254,255,254,3,3,3,2,255,254,255,3,3,3,255,254,2,47820,59728,44641,13477,49484,50164,14740,47490,25463,51510,51859,58147,43763,13998,14518,15631,32144,20065,5390,33423,43165,29214,34052,37514,21069,48404,42005,42066,8140,41894,51609,52958,6127,45333,21674,6962,4748,10140,13698,1916,2748,500,14797,14862,1097,13815,8027,5408,14012,8840,7230,1008,8914,8131,797,7494,3266,11314,11790,9007,14381,1775,10709,1421,7193,2885,840,2554,387,5452,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,2,1,5,4,5,3,3,5,1,2,7,0,0,7,2,1,4,7,6,6,2,5,6,7,6,6,1,4,7,0,7,2,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,111,169,251,225,190,99,156,201,66,220,170,173,137,144,13,29,160,223,6,245,247,162,25,97,147,165,173,101,222,53,80,241,148,234,2,1,255,1,254,254,255,1,254,255,1,254,2,2,255,1,255,1,2,1,254,2,254,254,254,255,1,255,254,255,254,1,255,255,254,255,254,2,255,254,1,1,1,2,2,255,2,2,255,255,254,255,254,254,1,2,2,255,254,254,1,255,1,255,1,254,1,255,1,254,184,112,142,187,45,48,38,120,191,167,9,204,131,201,164,118,128,100,220,115,95,248,115,140,108,37,202,144,210,92,5,146,169,19,168,58441750,37115420,57832796,7222851,32828816,74888948,41228240,67973059,48798056,80656449,48072986,59304556,41538424,21112461,48353461,74138134,57663706,77280238,40750283,41086067,33717230,80214490,55921711,81654949,15988327,74911263,43654481,7505900,1977663,16097542,4057237,39422326,70413326,50624658,56025028,9766,10666,11520,3154,65535,19524,11705,17737,10854,17305,8557,7403,2255,3680,13623,9026,16341,6666,2760,5002,6480,403,2372,17283,15275,8726,15499,14605,18053,1897,8990,9376,4532,16997,17568,109952810,163174239,131241822,73340376,34585697,70570295,62720590,28018634,114577483,1123689,119830543,49256028,61850545,675619,151694647,102848042,58293734,167091808,89461480,158181732,80155390,39987468,28104392,36011410,3817471,13213687,102441233,108108186,67943552,5614790,28628173,90973163,130300361,63594980,152302799,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,232,115,93,31,122,51,211,24,87,165,187,182,154,73,103,11,82,234,228,29,150,46,204,34,222,11,10,216,21,146,251,130,143,54,2272,55913,18481,24661,44590,56063,44804,22526,7512,53812,41012,48627,42036,42526,43954,33215,14547,58648,39641,14961,39390,33180,22597,55255,21804,36848,32369,48745,58128,13260,46275,55593,42204,48916,17413,59,204,82,144,56,74,37,200,9,176,159,112,62,255,148,64,205,20,254,45,2,83,102,234,183,187,35,201,45,135,25,148,252,244,229,558,383,475,994,9,146,937,38,748,91,577,992,975,3,486,454,689,397,368,724,696,105,757,396,813,435,498,990,943,520,340,676,849,975,305,206,233,99,254,22,150,90,99,54,93,11,33,84,124,55,243,120,42,207,185,7,15,85,83,119,42,131,41,176,140,209,177,116,150,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,209,110,157,180,149,254,231,132,94,68,3,174,232,83,78,192,139,235,153,250,223,67,33,211,236,58,9,237,149,242,152,149,120,51,2301,1852,1164,1053,878,1931,2327,2340,353,1626,2289,929,1406,1394,707,1277,581,1551,849,223,1089,447,52,2364,2210,2324,1475,1138,1462,1211,80,1927,1444,2091,1911,160,248,93,243,127,77,155,132,171,53,7,9,1,119,173,224,36,54,5,211,217,30,161,254,245,235,203,13,74,252,171,111,158,192,145,1981,10105,2296,3300,17876,6511,248,8402,19826,8668,18838,17448,19236,16227,1037,8449,14723,13789,2648,9631,17722,12928,2407,7367,3074,15832,9991,13704,6796,819,12964,14820,16208,2000,1570,12632,9874,3425,16225,16386,17831,4642,19238,7123,2069,8699,1807,2795,15413,566,15935,16364,12862,16564,16447,14840,4349,10722,3382,281,4036,4640,19617,8072,13987,14357,106,4819,110,13353,55740,14750,3506,57712,53008,17174,19776,10634,30989,17438,38759,56727,47175,20614,6511,55509,37086,32278,12161,43405,55846,28762,19306,51988,57617,11159,41927,14754,17538,16227,35175,36513,42290,46431,55994,53493,47536,4941,3031,45918,44243,21328,13168,1890,26582,13887,48725,1881,58937,30653,39103,53193,13556,34234,29015,59937,11339,9121,8593,7959,4745,51950,2465,15366,16699,25867,56450,5779,37806,55234,12,49,34,47,63,4,13,58,44,47,60,55,54,12,29,47,1,61,26,32,12,4,23,20,12,27,0,23,44,44,21,47,46,23,14,144,95,120,19,37,227,33,180,195,210,167,255,63,119,82,104,71,164,212,107,191,184,180,138,48,115,195,104,55,68,156,249,177,131,251,93,56,51,156,101,7,77,27,163,42,107,134,132,178,111,78,11,102,187,108,175,133,48,32,111,185,112,14,237,92,58,58,162,55,206,227403,359983,275461,207285,384261,795727,733075,192029,386461,634208,94406,492310,502013,575265,926245,213963,314021,278363,835679,721184,80313,566885,421804,385221,871021,466650,194770,795095,477060,815946,224197,821601,530657,951428,851441,106,198,194,78,135,236,237,117,16,249,254,33,214,3,71,14,200,211,96,186,181,151,60,38,23,100,31,250,240,145,41,89,195,92,229,114,29,239,88,246,129,104,227,57,61,100,246,236,167,97,212,111,232,9,119,72,34,80,61,246,85,64,230,101,57,147,27,42,127,227,2,1,255,1,1,255,2,1,254,254,2,2,1,2,1,255,1,1,254,255,255,255,255,1,1,1,254,1,255,255,255,2,254,2,1,140,49,171,48,197,184,176,219,66,110,240,86,22,175,21,19,47,64,191,197,124,168,89,249,236,134,173,245,98,14,217,137,18,140,197,132,130,180,148,162,78,66,50,116,61,15,75,235,87,24,133,206,70,134,213,58,141,13,180,231,78,247,227,254,57,77,5,24,17,181,116,98,74,159,20,230,204,206,137,1,83,210,20,224,69,75,15,158,82,139,210,5,14,101,97,184,115,228,203,187,50,241,11,239,3,85,24,28,29,38,89,79,62,2,50,65,9,16,24,42,32,28,83,9,21,64,21,44,77,5,74,33,57,53,62,72,39,0,29,62,254,3,254,0,0,1,254,3,1,0,3,2,255,255,255,2,255,0,1,1,2,255,1,255,254,0,1,255,2,255,2,2,255,3,255,177,120,20,199,97,154,136,41,118,97,133,102,10,57,58,198,216,73,27,23,22,165,71,41,155,195,7,211,22,206,193,121,172,135,113,236,40,207,181,84,187,49,116,210,200,170,70,141,38,57,130,176,73,144,102,85,61,78,54,81,238,82,23,71,67,232,79,231,101,49,68,188,206,112,69,207,225,106,219,158,17,9,127,136,131,89,228,13,151,242,20,231,174,207,189,16,238,78,44,180,60,193,63,1,213,211,47,231,120,170,142,197,224,162,157,235,47,60,131,0,64,93,229,235,80,77,50,121,70,96,153,27,37,2,51,70,36,59,240,69,45,237,114,246,71,15,70,27,243,90,220,220,77,85,20,38,36,30,100,83,84,160,227,239,36,197,186,108,18,113,126,245,22,185,156};

    static int[] testNum3 = new int[]{
            68,667,437,1480,968,964,961,1933,405,35,1902,122,1138,1324,488,1383,1118,1029,1817,820,1742,352,2057,2106,1163,1795,855,2076,1221,2200,1242,1672,165,1132,161,3
            ,254,1,255,1,2,1,254,1,1,2,2,2,2,3,254,1,254,3,254,255,254,3,3,3,2,255,254,255,3,3,3,255,254,2,47820
            ,59728,44641,13477,49484,50164,14740,47490,25463,51510,51859,58147,43763,13998,14518,15631,32144,20065,5390,33423,43165,29214,34052,37514,21069,48404,42005,42066,8140,41894,51609,52958,6127,45333,21674,6962,4748,10140,13698,1916,2748,500,14797,14862,1097,13815,8027,5408,14012,8840,7230,1008,8914,8131,797,7494,3266,11314,11790,9007,14381,1775,10709,1421,7193,2885,840,2554,387,5452,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,2,1,5,4,5,3,3,5,1,2,7,0,0,7,2,1,4,7,6,6,2,5,6,7,6,6,1,4,7,0,7,2,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,111,169,251,225,190,99,156,201,66,220,170,173,137,144,13,29,160,223,6,245,247,162,25,97,147,165,173,101,222,53,80,241,148,234,2,1,255,1,254,254,255,1,254,255,1,254,2,2,255,1,255,1,2,1,254,2,254,254,254,255,1,255,254,255,254,1,255,255,254,255,254,2,255,254,1,1,1,2,2,255,2,2,255,255,254,255,254,254,1,2,2,255,254,254,1,255,1,255,1,254,1,255,1,254,184,112,142,187,45,48,38,120,191,167,9,204,131,201,164,118,128,100,220,115,95,248,115,140,108,37,202,144,210,92,5,146,169,19,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,232,115,93,31,122,51,211,24,87,165,187,182,154,73,103,11,82,234,228,29,150,46,204,34,222,11,10,216,21,146,251,130,143,54,2272,55913,18481,24661,44590,56063,44804,22526,7512,53812,41012,48627,42036,42526,43954,33215,14547,58648,39641,14961,39390,33180,22597,55255,21804,36848,32369,48745,58128,13260,46275,55593,42204,48916,17413,59,204,82,144,56,74,37,200,9,176,159,112,62,255,148,64,205,20,254,45,2,83,102,234,183,187,35,201,45,135,25,148,252,244,229,558,383,475,994,9,146,937,38,748,91,577,992,975,3,486,454,689,397,368,724,696,105,757,396,813,435,498,990,943,520,340,676,849,975,305,206,233,99,254,22,150,90,99,54,93,11,33,84,124,55,243,120,42,207,185,7,15,85,83,119,42,131,41,176,140,209,177,116,150,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,209,110,157,180,149,254,231,132,94,68,3,174,232,83,78,192,139,235,153,250,223,67,33,211,236,58,9,237,149,242,152,149,120,51,2301,1852,1164,1053,878,1931,2327,2340,353,1626,2289,929,1406,1394,707,1277,581,1551,849,223,1089,447,52,2364,2210,2324,1475,1138,1462,1211,80,1927,1444,2091,1911,160,248,93,243,127,77,155,132,171,53,7,9,1,119,173,224,36,54,5,211,217,30,161,254,245,235,203,13,74,252,171,111,158,192,145,1981,10105,2296,3300,17876,6511,248,8402,19826,8668,18838,17448,19236,16227,1037,8449,14723,13789,2648,9631,17722,12928,2407,7367,3074,15832,9991,13704,6796,819,12964,14820,16208,2000,1570,12632,9874,3425,16225,16386,17831,4642,19238,7123,2069,8699,1807,2795,15413,566,15935,16364,12862,16564,16447,14840,4349,10722,3382,281,4036,4640,19617,8072,13987,14357,106,4819,110,13353,55740,14750,3506,57712,53008,17174,19776,10634,30989,17438,38759,56727,47175,20614,6511,55509,37086,32278,12161,43405,55846,28762,19306,51988,57617,11159,41927,14754,17538,16227,35175,36513,42290,46431,55994,53493,47536,4941,3031,45918,44243,21328,13168,1890,26582,13887,48725,1881,58937,30653,39103,53193,13556,34234,29015,59937,11339,9121,8593,7959,4745,51950,2465,15366,16699,25867,56450,5779,37806,55234,12,49,34,47,63,4,13,58,44,47,60,55,54,12,29,47,1,61,26,32,12,4,23,20,12,27,0,23,44,44,21,47,46,23,14,144,95,120,19,37,227,33,180,195,210,167,255,63,119,82,104,71,164,212,107,191,184,180,138,48,115,195,104,55,68,156,249,177,131,251,93,56,51,156,101,7,77,27,163,42,107,134,132,178,111,78,11,102,187,108,175,133,48,32,111,185,112,14,237,92,58,58,162,55,206,227403,359983,275461,207285,384261,795727,733075,192029,386461,634208,94406,492310,502013,575265,926245,213963,314021,278363,835679,721184,80313,566885,421804,385221,871021,466650,194770,795095,477060,815946,224197,821601,530657,951428,851441,106,198,194,78,135,236,237,117,16,249,254,33,214,3,71,14,200,211,96,186,181,151,60,38,23,100,31,250,240,145,41,89,195,92,229,114,29,239,88,246,129,104,227,57,61,100,246,236,167,97,212,111,232,9,119,72,34,80,61,246,85,64,230,101,57,147,27,42,127,227,2,1,255,1,1,255,2,1,254,254,2,2,1,2,1,255,1,1,254,255,255,255,255,1,1,1,254,1,255,255,255,2,254,2,1,140,49,171,48,197,184,176,219,66,110,240,86,22,175,21,19,47,64,191,197,124,168,89,249,236,134,173,245,98,14,217,137,18,140,197,132,130,180,148,162,78,66,50,116,61,15,75,235,87,24,133,206,70,134,213,58,141,13,180,231,78,247,227,254,57,77,5,24,17,181,116,98,74,159,20,230,204,206,137,1,83,210,20,224,69,75,15,158,82,139,210,5,14,101,97,184,115,228,203,187,50,241,11,239,3,85,24,28,29,38,89,79,62,2,50,65,9,16,24,42,32,28,83,9,21,64,21,44,77,5,74,33,57,53,62,72,39,0,29,62,254,3,254,0,0,1,254,3,1,0,3,2,255,255,255,2,255,0,1,1,2,255,1,255,254,0,1,255,2,255,2,2,255,3,255,177,120,20,199,97,154,136,41,118,97,133,102,10,57,58,198,216,73,27,23,22,165,71,41,155,195,7,211,22,206,193,121,172,135,113,236,40,207,181,84,187,49,116,210,200,170,70,141,38,57,130,176,73,144,102,85,61,78,54,81,238,82,23,71,67,232,79,231,101,49,68,188,206,112,69,207,225,106,219,158,17,9,127,136,131,89,228,13,151,242,20,231,174,207,189,16,238,78,44,180,60,193,63,1,213,211,47,231,120,170,142,197,224,162,157,235,47,60,131,0,64,93,229,235,80,77,50,121,70,96,153,27,37,2,51,70,36,59,240,69,45,237,114,246,71,15,70,27,243,90,220,220,77,85,20,38,36,30,100,83,84,160,227,239,36,197,186,108,18,113,126,245,22,185,156
    };

    static int[] testNum4 = new int[1575];
    static  {
        Random random = new Random();
        for (int i = 0; i < 1575; i++) {
            testNum4[i] = 0;
        }
    }


    public static void main(String[] args) {
        for (int i = 0; i < testNum3.length; i += 35) {
            final int i1 = testNum3[i];
            System.out.println(i1);
        }
        long start = System.currentTimeMillis();
        int[] data = testNum4.clone();
        final byte[] compress = compress(data);
        System.out.println("cost:" + (System.currentTimeMillis() - start) + " ms");
        final int[] decompress = decompress(compress);
        boolean b = Arrays.equals(testNum4, decompress);


        final byte[] bytes = compress2(testNum3);
        final int[] output = new int[testNum3.length];
        decompress2(bytes, output);

        boolean a = Arrays.equals(testNum3, output);
        System.out.println(b);
    }

    public static byte[] compress2(int[] ints) {
        try {
            final Composition composition = new Composition(new FastPFOR(), new VariableByte());
            IntWrapper aOffset = new IntWrapper(0);
            IntWrapper bOffset = new IntWrapper(0);
            int[] output = new int[ints.length];
            composition.compress(ints, aOffset, ints.length, output, bOffset);
            final int length = bOffset.get();
            final ByteBuffer allocate = ByteBuffer.allocate(length * 4);
            for (int i = 0; i < length; i++) {
                allocate.putInt(output[i]);
            }
            return allocate.array();
        } catch (Exception e) {
            System.out.println("compress2 error, e" + e);
        }
        return null;
    }

    public static int[] decompress2(byte[] bytes, int[] output) {
        final ByteBuffer wrap = ByteBuffer.wrap(bytes);
        int[] ints = new int[bytes.length / 4];
        for (int j = 0; j < ints.length; j++) {
            ints[j] = wrap.getInt();
        }
        final Composition composition = new Composition(new FastPFOR(), new VariableByte());
        IntWrapper aOffset = new IntWrapper(0);
        IntWrapper bOffset = new IntWrapper(0);
        composition.uncompress(ints, aOffset, ints.length, output, bOffset);
        return output;
    }

    public static byte[] compress(int[] ints) {
//        int[] gapArray = toGapArray(ints);
//        for (int i = 0; i < gapArray.length; i++) {
//            gapArray[i] = ZigZagUtil.intToZigZag(gapArray[i]);
//        }
        int[] ints1 = Simple9Codes.innerEncode(ints);
//        if (Constants.USE_ZIGZAG) {
//            for (int i = 0; i < ints1.length; i++) {
//                ints1[i] = ZigZagUtil.intToZigZag(ints1[i]);
//            }
//        }
        ByteBuffer allocate = ByteBuffer.allocate(ints1.length * 4);
        for (int i : ints1) {
            allocate.putInt(i);
        }
        final byte[] array = allocate.array();
        GzipCompress gzipCompress = TSFileService.GZIP_COMPRESS_THREAD_LOCAL.get();
        return gzipCompress.compress(array);
    }

    public static byte[] compress3(int[] ints) {
        int[] gapArray = toGapArray(ints);
        for (int i = 0; i < gapArray.length; i++) {
            gapArray[i] = ZigZagUtil.intToZigZag(gapArray[i]);
        }
        final Simple9 simple9 = new Simple9();
        int[] output = new int[ints.length];
        final IntWrapper intWrapper = new IntWrapper(0);
        simple9.compress(gapArray, new IntWrapper(0), gapArray.length, output, intWrapper);
        final ByteBuffer allocate = ByteBuffer.allocate(intWrapper.get() * 4);
        for (int i = 0; i < intWrapper.get(); i++) {
            allocate.putInt(output[i]);
        }
        return allocate.array();
    }

    public static int[] decompress3(byte[] bytes) {
        final ByteBuffer wrap = ByteBuffer.wrap(bytes);
        int length = bytes.length / 4;
        int[] ints = new int[length];
        for (int i = 0; i < length; i++) {
            ints[i] = wrap.getInt();
        }
        final Simple9 simple9 = new Simple9();
        int[] output = new int[2048];
        final IntWrapper outputWrapper = new IntWrapper(0);
        simple9.uncompress(ints, new IntWrapper(0), ints.length, output, outputWrapper);
        int[] decode = new int[outputWrapper.get()];
        for (int i = 0; i < outputWrapper.get(); i++) {
            decode[i] = output[i];
        }
        for (int i = 0; i < decode.length; i++) {
            decode[i] = ZigZagUtil.zigzagToInt(decode[i]);
        }
        for (int i = 1; i < decode.length; i++) {
            decode[i] = decode[i - 1] + decode[i];
        }
        return decode;
    }

    protected static int[] toGapArray(int[] numbers) {
        int prev = numbers[0];
        for (int i = 1; i < numbers.length; i++) {
            int tmp = numbers[i];
            numbers[i] = numbers[i] - prev;
            prev = tmp;
        }
        return numbers;

    }

    public static int[] decompress(byte[] bytes) {
        GzipCompress gzipCompress = TSFileService.GZIP_COMPRESS_THREAD_LOCAL.get();
        final byte[] bytes1 = gzipCompress.deCompress(bytes);
        final ByteBuffer wrap = ByteBuffer.wrap(bytes1);
        int[] ints = new int[bytes1.length / 4];
        for (int j = 0; j < ints.length; j++) {
            ints[j] = wrap.getInt();
        }
        if (Constants.USE_ZIGZAG) {
            for (int j = 0; j < ints.length; j++) {
                ints[j] = ZigZagUtil.zigzagToInt(ints[j]);
            }
        }
        final int[] decode = Simple9Codes.decode(ints);
//        for (int i = 0; i < decode.length; i++) {
//            decode[i] = ZigZagUtil.zigzagToInt(decode[i]);
//        }
//        for (int i = 1; i < decode.length; i++) {
//            decode[i] = decode[i - 1] + decode[i];
//        }
        return decode;
    }
}
